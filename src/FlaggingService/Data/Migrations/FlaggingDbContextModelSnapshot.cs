// <auto-generated />
using System;
using FlaggingService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlaggingService.Data.Migrations
{
    [DbContext(typeof(FlaggingDbContext))]
    partial class FlaggingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlaggingService.Entities.Establishment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Establishments");
                });

            modelBuilder.Entity("FlaggingService.Entities.EstablishmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EstablishmentType");
                });

            modelBuilder.Entity("FlaggingService.Entities.Flag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Significance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Flags");
                });

            modelBuilder.Entity("FlaggingService.Entities.Flagger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlaggingService.Entities.Flagging", b =>
                {
                    b.Property<Guid>("FlagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlaggedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EstablishmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int>("FlagCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FlaggedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FlagId", "FlaggedBy", "EstablishmentId");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("FlaggedBy");

                    b.ToTable("Flagging");
                });

            modelBuilder.Entity("FlaggingService.Entities.Establishment", b =>
                {
                    b.HasOne("FlaggingService.Entities.EstablishmentType", "EstType")
                        .WithMany("Establishments")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstType");
                });

            modelBuilder.Entity("FlaggingService.Entities.Flagging", b =>
                {
                    b.HasOne("FlaggingService.Entities.Establishment", "Establishment")
                        .WithMany("Flagging")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlaggingService.Entities.Flag", "Flag")
                        .WithMany("Flagging")
                        .HasForeignKey("FlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlaggingService.Entities.Flagger", "Flagger")
                        .WithMany("Flagging")
                        .HasForeignKey("FlaggedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");

                    b.Navigation("Flag");

                    b.Navigation("Flagger");
                });

            modelBuilder.Entity("FlaggingService.Entities.Establishment", b =>
                {
                    b.Navigation("Flagging");
                });

            modelBuilder.Entity("FlaggingService.Entities.EstablishmentType", b =>
                {
                    b.Navigation("Establishments");
                });

            modelBuilder.Entity("FlaggingService.Entities.Flag", b =>
                {
                    b.Navigation("Flagging");
                });

            modelBuilder.Entity("FlaggingService.Entities.Flagger", b =>
                {
                    b.Navigation("Flagging");
                });
#pragma warning restore 612, 618
        }
    }
}
